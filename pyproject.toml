[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ruijie-warranty-query"
version = "2.0.0"
description = "锐捷网络设备保修期批量查询工具"
authors = [
    {name = "Mison", email = "mison@example.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["ruijie", "warranty", "query", "automation", "selenium"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Software Development :: Testing",
    "Topic :: Utilities",
]

# 核心依赖
dependencies = [
    "pandas>=1.5.0",
    "selenium>=4.15.0",
    "openpyxl>=3.1.0",
    "webdriver-manager>=4.0.0",
    "ddddocr>=1.4.0",
    "configparser>=5.0.0",  # Python标准库，通常不需要显式声明
]

# 可选依赖组
[project.optional-dependencies]
# AI识别支持 - Gemini API
ai-gemini = [
    "google-generativeai>=0.3.0",
]

# AI识别支持 - OpenAI兼容API
ai-openai = [
    "openai>=1.3.0",
]

# 完整AI支持（包含所有AI服务）
ai-all = [
    "google-generativeai>=0.3.0",
    "openai>=1.3.0",
]

# 开发依赖
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]

# 文档依赖
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
]

[project.urls]
Homepage = "https://github.com/MisonL/RuijieWarrantyQuery"
Repository = "https://github.com/MisonL/RuijieWarrantyQuery.git"
Issues = "https://github.com/MisonL/RuijieWarrantyQuery/issues"
Changelog = "https://github.com/MisonL/RuijieWarrantyQuery/blob/main/CHANGELOG.md"

# 项目配置
[project.scripts]
ruijie-query = "ruijie_query.main:main"

[tool.hatch.build.targets.wheel]
packages = ["ruijie_query"]

# Black代码格式化配置
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort导入排序配置
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# pytest测试配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests", "__tests__"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# 覆盖率配置
[tool.coverage.run]
source = ["ruijie_query"]
omit = [
    "*/tests/*",
    "*/__tests__/*",
    "*/test_*",
    "*/setup.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# mypy类型检查配置
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ddddocr.*",
    "webdriver_manager.*",
    "google.generativeai.*",
    "openai.*",
]
ignore_missing_imports = true